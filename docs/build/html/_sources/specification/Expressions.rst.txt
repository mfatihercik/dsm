.. _expression:

*********************
_`Expressions`
*********************

-------------------------

Expressions make DSM very flexible. Expression allows a value to be filtered, manipulated, modified etc. 
Expressions can access objects in the expression context and do operations by using these objects.

Expressions can be used at both `source document`_ parsing time and `DSM document`_ loading time.

There are two type of expression, **Loading Time** and **Parsing Time** expressions.


Loading Time Expression
==========================

---------------------------


Loading Time Expression is expressions that is **only used during loading of `DSM document`.**
It allows you to **modify structure of  DSM document.**

Loading Time Expressions are defined in the `$extends`_ and or `$ref`_ fields. For more detail check `$extends`_ and or `$ref`_ field.

.. seealso::

    `$extends`_

    `$ref`_
   
The following fields are available in the expression context.
   
.. csv-table::
    :header: Name, Data Type, Description, Example
    :stub-columns: 1
    :delim: |  
    
    params_ | Map<string,Object> | params_ object. | **params.dateFormat** =='dd.MM.yyyy' 


**Example**
------------

-------------------------

..  content-tabs::
       
      .. tab-container:: yaml
         :title: YAML

        
         .. code-block:: yaml
         
            version: 1.0
            params:
               rootPath: /bar/foo/
            $extends: 
               - /foo/bar/external.yaml
               - $params.rootPath.concat("externalWithExpression.yaml") # use "params" object in expression context to get "rootPath" property

      .. tab-container:: json
          :title: JSON
          
          
          .. code-block:: json
          
             {
                "version": 1.0,
                "params":{
                "rootPath":"/bar/foo/"
                },
                "$extends": ["/foo/bar/external.json","$params.rootPath.concat('externalWithExpression.json')"]
              } 


Parsing Time Expression
==========================

--------------------------

Parsing Time Expression is expressions that is **only used during parsing of `source document`.** 
It allows you to change the structure of the output, change the property value, import a specific part of the `source document`_, filter by property , transform a property, and almost  all operations that can be done with custom coding.   

The Parsing Time Expressions can be defined in the filter_, default_, and normalize_ fields.
   
The following objects are available in the expression context.


.. csv-table::
    :header: Name, Data Type, Description, Example
    :stub-columns: 1
    :delim: | 
    
    params_ | Map<string,any> | params_ object. | **params.dateFormat** =='dd.MM.yyyy' 
    all_ | Map<string,Node_> | A map that stores all nodes by the "uniqueName_" of `Parsing Element Object`_  | **all.bar.data.foo** => foo field of **bar** node,  **all.barList.data[0].foo** => *foo* field of first item of *barList* node
    self_ | Node_ | current node object that hold data of current complex type_ | **self.data.foo** => foo field of current node,     **self.parent.data.foo** => foo field of parent node, **self.data.bar.foo** => foo field of bar object in current node.    
    value | string | (not available in default_ field) The raw string value of the current tag in `source document`_ | **value=='Computer'**,**value.startWith('bar')**

.. seealso::

   Node_  ,  default_,  filter_,   normalize_,  `$extends`_,  `$ref`_




_`all`
---------

-------------------------

Each complex type_ creates a node_. The created nodes can be accessed using the "all" object in the expressions. 
Each node is stored in all_ map with the uniqueName_ of the `Parsing Element`_ that creates the node.  





.. code-block:: yaml

   result:
        type: array
        fields:
            order: 
                 type:  object
                 fields:
                    state: string
                    createDate: date                         
                    saleLines:
                         type: array
                         fields: 
                            product:
                                  type: object
                                  fields: 
                                      id: string
                                      name: string
                                      price: string
                            quantity: long
                            unit: string
                    
            company:
                 type: object
                 fields:
                     id: string
                     name: string
                     price: string
                     
                     
for configuration at above following all_ map is created.


.. code-block:: yaml

   result:
         parent: null
         data:
            order: order.data        # contains data of the order node
            company: company.data
   order:
           parent: result
           data:
              orderLines: orderLines.data
   company:
           parent: result
           data: {}
   orderLines: 
        parent: order
        data: [{ product:product.data  }]  # data is array. each item contains product data
   product:
         parent: orderLines
         data: {}
    
Example usages:

:product.parent:  is equals orderLine node
:product.parent.data: is equals orderLine.data
:product.parent.parent: is equals order
:product.parent.parent.data: is equals order.data
:product.parent.parent.parent: is equals result
:order.data.orderLine: is equals orderLine.data
:order.data.orderLine[lastIndex].product: is equals product.data 


_`self`
---------------

-------------------------

current node object that hold data of current complex type_.

Example usages:

:self.parent:  parent node
:self.data.foo: foo field of current object
:self.data[0]: First element of current array


**Example**
------------

------------------------------

..  content-tabs::
       
      .. tab-container:: yaml
         :title: YAML

         .. code-block:: yaml
         
            version: 1.0
            result:             
              type: object
              path: /
              fields:
                 name:    
                     - filter: $ self.data.categoryType=='foo'     # filter expression. 
                       default: 
                          value: foo  # force set name to foo with filter
                          force: true
                     - path: name    
                 category: 
                    type: object
                    fields:
                       id: int
                       name: 
                         default: self.parent.data.categoryType=='foo'? 'Foo':'Bar'  # default value is expression. 
                       categoryType:
                           default: all.data.categoryType=='foo'? 'Foo':'Bar'  # default value is expression. and its is equivalent of expression in category.name property.
                 productUnit:
                       default: $ self.data.categoryType=='foo'? 'LT': 'KG'    # default value is expression.  
                 categoryType: 
                        default: "foo"   # default value a is a string. 

      .. tab-container:: json
         :title: JSON

          .. code-block:: json
          
             {
                "version": 1.0,
                "result":{
                   "type"bject",
                   "path":"/"  ,       
                   "fields":{
                      "name":"string",
                      "category":{
                         "id": "int",
                         "name": {
                            "default": "self.parent.data.categoryType=='foo'? 'Foo':'Bar'",
                         },
                         "categoryType": {
                            "default": "default: all.data.categoryType=='foo'? 'Foo':'Bar'",
                         }
                      },            
                      "productUnit":{
                         "default": " $self.data.categoryType=='foo'? 'LT': 'KG'"
                      },
                      "categoryType":{
                         "default": "foo"
                      }
                    }
                }
              } 

